esphome:
  name: smartdisplay
  friendly_name: SmartDisplay

esp32:
  board: esp32dev
  framework:
    type: arduino

logger:

api:

ota:
  - platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # power_save_mode: none  # recommended on busy 2.4 GHz networks

captive_portal:

time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - seconds: 0
        minutes: /1
        then:
          - component.update: my_display

font:
  - file: "gfonts://Roboto@500"
    id: big_text
    size: 60
    bpp: 4
    glyphs: ['&','@','!',',','.','?','"','%','(',')','+','-','_',';',':','°','0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',' ','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','å','Ä','ä','Ö','ö','Ü','ü','/']

  - file: "gfonts://Roboto@300"
    id: notice_text
    size: 16
    bpp: 4
    glyphs: ['&','@','!',',','.','?','"','%','(',')','+','-','_',';',':','°','0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',' ','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','å','Ä','ä','Ö','ö','Ü','ü','/']

  - file: "gfonts://Roboto@400"
    id: label
    size: 13
    bpp: 4
    glyphs: ['&','@','!',',','.','?','"','%','(',')','+','-','_',';',':','°','0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',' ','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','å','Ä','ä','Ö','ö','Ü','ü','/']

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: materialdesign_icons
    size: 35
    glyphs: ["\U000F1A45", "\U000F0210", "\U000F0335", "\U000F1051"]

color:
  - id: ACTIVE
    hex: "FEC600"
  - id: INACTIVE
    hex: "808080"

sensor:
  - platform: wifi_signal
    name: "Wifi Signal"
    update_interval: 600s
  - platform: uptime
    name: "Uptime"
    id: uptime_s
    update_interval: 15s

binary_sensor:
  - platform: status
    name: "Node Status"
    id: system_status

  - platform: touchscreen
    name: Button 1
    x_min: 53
    x_max: 131
    y_min: 18
    y_max: 63
    on_press:
      then:
        - homeassistant.service:
            service: switch.toggle
            data:
              entity_id: switch.infrarood_bureau

  - platform: touchscreen
    name: Button 2
    x_min: 53
    x_max: 131
    y_min: 72
    y_max: 115
    on_press:
      then:
        - homeassistant.service:
            service: fan.toggle
            data:
              entity_id: fan.pwm_fan_867b6c_pwm_fan

  - platform: touchscreen
    name: Button 3
    x_min: 53
    x_max: 131
    y_min: 126
    y_max: 169
    on_press:
      then:
        - homeassistant.service:
            service: light.toggle
            data:
              entity_id: light.gamekamer

  - platform: touchscreen
    name: Button 4
    x_min: 53
    x_max: 131
    y_min: 178
    y_max: 224
    on_press:
      then:
        - homeassistant.service:
            service: light.toggle
            data:
              entity_id: light.bureau

text_sensor:
  - platform: template
    name: "Uptime (formatted)"
    lambda: |-
      uint32_t dur = id(uptime_s).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[17];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
    update_interval: 60s

  - platform: homeassistant
    id: button1
    entity_id: switch.infrarood_bureau
    on_value:
      then:
        - component.update: my_display

  - platform: homeassistant
    id: button2
    entity_id: fan.pwm_fan_867b6c_pwm_fan
    on_value:
      then:
        - component.update: my_display

  - platform: homeassistant
    id: button3
    entity_id: light.gamekamer
    on_value:
      then:
        - component.update: my_display

  - platform: homeassistant
    id: button4
    entity_id: light.bureau
    on_value:
      then:
        - component.update: my_display

switch:
  - platform: restart
    name: "Restart"

spi:
  - id: lcd
    clk_pin: GPIO14
    mosi_pin: GPIO13
    miso_pin: GPIO12
  - id: my_touchscreen
    clk_pin: GPIO25
    mosi_pin: GPIO32
    miso_pin: GPIO39

output:
  - platform: ledc
    pin: GPIO21
    id: gpio_backlight_pwm
  - platform: ledc
    id: output_red
    pin: GPIO4
    inverted: true
  - platform: ledc
    id: output_green
    pin: GPIO16
    inverted: true
  - platform: ledc
    id: output_blue
    pin: GPIO17
    inverted: true

light:
  - platform: monochromatic
    output: gpio_backlight_pwm
    name: "Power Display Backlight"
    id: back_light
    restore_mode: ALWAYS_ON
  - platform: rgb
    name: "LED"
    red: output_red
    id: led
    green: output_green
    blue: output_blue
    restore_mode: ALWAYS_OFF

touchscreen:
  platform: xpt2046
  spi_id: my_touchscreen
  cs_pin: 33
  interrupt_pin: 36
  update_interval: 50ms
  threshold: 400
  on_touch:
    - lambda: |-
        ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%0d",
            touch.x,
            touch.y,
            touch.x_raw,
            touch.y_raw
        );
  calibration:
    x_min: 280
    x_max: 3860
    y_min: 340
    y_max: 3860
  transform:
    mirror_x: true
    mirror_y: false

display:
  - platform: ili9xxx
    id: my_display
    spi_id: lcd
    model: ILI9341
    color_palette: 8BIT
    cs_pin: 15
    dc_pin: 2
    rotation: 90
    invert_colors: false
    update_interval: never
    pages:
      - id: lockscreen_page
        lambda: |-
          it.fill(Color(0, 0, 0));

          std::map<std::uint8_t, std::string> day_map{
            {2, "Maandag"},
            {3, "Dinsdag"},
            {4, "Woensdag"},
            {5, "Donderdag"},
            {6, "Vrijdag"},
            {7, "Zaterdag"},
            {1, "Zondag"}
          };

          std::map<std::uint8_t, std::string> month_map{
            {1, "Januari"},
            {2, "Februari"},
            {3, "Maart"},
            {4, "April"},
            {5, "Mei"},
            {6, "Juni"},
            {7, "Juli"},
            {8, "Augustus"},
            {9, "September"},
            {10, "Oktober"},
            {11, "November"},
            {12, "December"}
          };

          auto white = Color(255, 255, 255);
          int b_pos_y = 170;

          // Button 1 (Verwarming)
          int b1_pos_x = (it.get_width()/2) - 105;
          it.filled_circle(b1_pos_x, b_pos_y, 30, id(button1).state == "off" ? id(INACTIVE) : white);
          it.printf(b1_pos_x, b_pos_y, id(materialdesign_icons), id(ACTIVE), TextAlign::CENTER, "\U000F1A45");
          it.printf(b1_pos_x, b_pos_y + 45, id(label), white, TextAlign::CENTER, "Verwarming");

          // Button 2 (Ventilator)
          int b2_pos_x = (it.get_width()/2) - 35;
          it.filled_circle(b2_pos_x, b_pos_y, 30, id(button2).state == "off" ? id(INACTIVE) : white);
          it.printf(b2_pos_x, b_pos_y, id(materialdesign_icons), id(ACTIVE), TextAlign::CENTER, "\U000F0210");
          it.printf(b2_pos_x, b_pos_y + 45, id(label), white, TextAlign::CENTER, "Ventilator");

          // Button 3 (Verlichting)
          int b3_pos_x = (it.get_width()/2) + 35;
          it.filled_circle(b3_pos_x, b_pos_y, 30, id(button3).state == "off" ? id(INACTIVE) : white);
          it.printf(b3_pos_x, b_pos_y, id(materialdesign_icons), id(ACTIVE), TextAlign::CENTER, "\U000F0335");
          it.printf(b3_pos_x, b_pos_y + 45, id(label), white, TextAlign::CENTER, "Verlichting");

          // Button 4 (Sfeer)
          int b4_pos_x = (it.get_width()/2) + 105;
          it.filled_circle(b4_pos_x, b_pos_y, 30, id(button4).state == "off" ? id(INACTIVE) : white);
          it.printf(b4_pos_x, b_pos_y, id(materialdesign_icons), id(ACTIVE), TextAlign::CENTER, "\U000F1051");
          it.printf(b4_pos_x, b_pos_y + 45, id(label), white, TextAlign::CENTER, "Sfeer");

          // Datum + Tijd (note: no dot after day)
          std::string day_of_week = day_map[id(homeassistant_time).now().day_of_week];
          int day_of_month = id(homeassistant_time).now().day_of_month;
          std::string month = month_map[id(homeassistant_time).now().month];
          it.printf(it.get_width()/2, it.get_height()/2 - 90, id(notice_text), white, TextAlign::CENTER,
                    "%s, %d %s", day_of_week.c_str(), day_of_month, month.c_str());
          it.strftime(it.get_width()/2, it.get_height()/2 - 45, id(big_text), white, TextAlign::CENTER,
                      "%H:%M", id(homeassistant_time).now())
